generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id               Int     @id @default(autoincrement())
  userId           Int
  type             String
  provider         String
  providerAccountId String
  refresh_token    String?
  access_token     String?
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String?
  session_state    String?
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             Int             @id @default(autoincrement())
  firstName      String?
  lastName       String?
  name           String?
  email          String?         @unique
  createdAt      DateTime        @default(now()) @map("createAt")
  image          String?
  accounts       Account[]
  sessions       Session[]
  contacts       Contact[]
  contactGroups  ContactGroup[]
  emails         Email[]         @relation("UserEmails")
  sentEmails     Email[]         @relation("SentEmails")
  receivedEmails EmailRecipient[]
  chats          Chat[]
  messages       Message[]
  labels         Label[]
  settings       UserSettings?
  emailConfig    EmailConfig?
}

model EmailConfig {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  email       String
  host        String
  port        Int
  password    String?
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id                Int     @id @default(autoincrement())
  userId            Int     @unique
  signature         String?
  defaultFontSize   Int?    @default(12)
  theme             String? @default("light")
  emailsPerPage     Int?    @default(50)
  showReadReceipts  Boolean @default(true)
  autoAddSignature  Boolean @default(true)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id             Int             @id @default(autoincrement())
  userId         Int
  email          String
  firstName      String?
  lastName       String?
  company        String?
  phone          String?
  avatar         String?
  notes          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isFavorite     Boolean         @default(false)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactGroups  ContactGroupMembership[]
  
  @@unique([userId, email])
}

model ContactGroup {
  id          Int                      @id @default(autoincrement())
  userId      Int
  name        String
  description String?
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  user        User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contacts    ContactGroupMembership[]
  
  @@unique([userId, name])
}

model ContactGroupMembership {
  id            Int          @id @default(autoincrement())
  contactId     Int
  contactGroupId Int
  contact       Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactGroup  ContactGroup @relation(fields: [contactGroupId], references: [id], onDelete: Cascade)
  
  @@unique([contactId, contactGroupId])
}

model Label {
  id          Int           @id @default(autoincrement())
  userId      Int
  name        String
  color       String?
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  emails      EmailLabel[]
  
  @@unique([userId, name])
}

model EmailLabel {
  id        Int     @id @default(autoincrement())
  emailId   Int
  labelId   Int
  color     String?
  email     Email   @relation(fields: [emailId], references: [id], onDelete: Cascade)
  label     Label   @relation(fields: [labelId], references: [id], onDelete: Cascade)
  
  @@unique([emailId, labelId])
}

model Email {
  id              Int               @id @default(autoincrement())
  userId          Int
  senderId        Int
  subject         String
  content         String            @db.Text
  htmlContent     String?           @db.Text
  threadId        String?
  isDraft         Boolean           @default(false)
  isArchived      Boolean           @default(false)
  isFavorite      Boolean           @default(false)
  isRead          Boolean           @default(false)
  createdAt       DateTime          @default(now())
  sentAt          DateTime?
  user            User              @relation("UserEmails", fields: [userId], references: [id], onDelete: Cascade)
  sender          User              @relation("SentEmails", fields: [senderId], references: [id])
  recipients      EmailRecipient[]
  attachments     Attachment[]
  labels          EmailLabel[]
  parentEmail     Email?            @relation("EmailThread", fields: [parentEmailId], references: [id])
  parentEmailId   Int?
  replies         Email[]           @relation("EmailThread")
}

model EmailRecipient {
  id        Int     @id @default(autoincrement())
  emailId   Int
  userId    Int
  type      RecipientType
  email     Email   @relation(fields: [emailId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id])
  
  @@unique([emailId, userId, type])
}

enum RecipientType {
  TO
  CC
  BCC
}

model Attachment {
  id        Int     @id @default(autoincrement())
  emailId   Int
  filename  String
  fileSize  Int
  mimeType  String
  path      String
  createdAt DateTime @default(now())
  email     Email   @relation(fields: [emailId], references: [id], onDelete: Cascade)
}

model Chat {
  id          Int       @id @default(autoincrement())
  userId      Int
  name        String?
  isGroup     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  id        Int     @id @default(autoincrement())
  chatId    Int
  userId    Int
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
  isAdmin   Boolean  @default(false)
  chat      Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  @@unique([chatId, userId])
}

model Message {
  id          Int       @id @default(autoincrement())
  chatId      Int
  senderId    Int
  content     String    @db.Text
  isRead      Boolean   @default(false)
  isEdited    Boolean   @default(false)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chat        Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender      User      @relation(fields: [senderId], references: [id])
  attachments MessageAttachment[]
}

model MessageAttachment {
  id        Int     @id @default(autoincrement())
  messageId Int
  filename  String
  fileSize  Int
  mimeType  String
  path      String
  createdAt DateTime @default(now())
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}